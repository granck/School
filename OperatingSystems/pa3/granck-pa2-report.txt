The sequentialTest took significantly less time to execute than parallelTest for each individual matrixMultiply worker. This is clearly due to the fact that multiple threads aren't running and CPU resources aren't being shared when running sequentialTest. When all (8) threads are made and calculating at the same time, the CPU has to divide the available time it has between them all, resulting in a longer calculation time for each of them. It's interesting to note the slight increase in time necessary to compute the matrix multiplication in the parallelTest as the number of threads returning values increases. That is to say, the first thread returned a value of (1939) while the last returned a value of (1992). This could probably just be attributed to the amount of time the for loop required to cycle all of the requests to the ServicePool. 
